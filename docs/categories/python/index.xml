<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on WM Seismic Solutions</title>
    <link>https://waynegm.github.io/categories/python/</link>
    <description>Recent content in Python on WM Seismic Solutions</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 05 Jun 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://waynegm.github.io/categories/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>First Release of Python Bindings to OpendTect</title>
      <link>https://waynegm.github.io/blog/opendtect-python-bindings-release/</link>
      <pubDate>Sat, 05 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://waynegm.github.io/blog/opendtect-python-bindings-release/</guid>
      <description>&lt;p&gt;The 6.6.8 release of the wmPlugins includes a Python module, &lt;strong&gt;wmodpy&lt;/strong&gt;, to access OpendTect survey and well information. The &lt;strong&gt;odpy&lt;/strong&gt;
module already included with OpendTect uses a C++ command line application to interact with the OpendTect data structures. Each
request for data by the &lt;strong&gt;odpy&lt;/strong&gt; API incurs the overhead of starting this application and the writing and reading of the information as
an ascii data stream. The &lt;strong&gt;wmodpy&lt;/strong&gt; module, however, is a direct binding to the OpendTect C++ code so Python is directly reading from
the in-memory representation of the data. Data access with the &lt;strong&gt;wmodpy&lt;/strong&gt; module should be much faster.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
